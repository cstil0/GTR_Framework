//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
light basic.vs light.fs
depth quad.vs depth.fs
multi basic.vs multi.fs

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;



out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

// AQUEST SHADER S'HA DE PROGRAMAR PER LES LLUMS
\light.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

// Light parameters
uniform int u_type_of_render;
uniform vec3 u_ambient_light;

// -- Single Pass
#define MAX_LIGHTS 10
uniform int u_lights_type[MAX_LIGHTS];
uniform vec3 u_lights_position[MAX_LIGHTS];
uniform vec3 u_lights_color[MAX_LIGHTS];
uniform float u_lights_intensity[MAX_LIGHTS];
uniform float u_lights_max_distance[MAX_LIGHTS];
uniform vec3 u_lights_direction[MAX_LIGHTS];
uniform float u_lights_cone_cos[MAX_LIGHTS];
uniform float u_lights_cone_exp[MAX_LIGHTS];

// -- Multi Pass
uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform float u_light_intensity;
uniform float u_light_max_distance;
uniform vec3 u_light_direction;
uniform float u_light_cone_cos;
uniform float u_light_cone_exp;

out vec4 FragColor;

vec3 computeSpotLight(vec3 color, float intensity, float max_dist, vec3 pos, vec3 light_dir, float cone_cos, float cone_exp){
	// Distance from current point to light
	vec3 L = pos - v_world_position;
	// Modulus
	float light_dist = length(L);
	// Normalize L
	L/= light_dist;
	// Spot direction
	vec3 D = -normalize(light_dir);
	float DdotL = dot(D,L);

	// Compute light if point is inside the cut-off angle
	if (DdotL >= cone_cos){
		vec3 N = normalize(v_normal);
		float NdotL = clamp(dot(L,N), 0.0, 1.0);

		// Attenuation
		float att_factor = max_dist - light_dist;
		att_factor /= max_dist;
		att_factor = max(att_factor, 0.0);

		float spot_factor = pow(DdotL, cone_exp);
		return color * NdotL * intensity * pow(att_factor,2) * spot_factor;
	}
	else{
		return vec3(0.0f, 0.0f, 0.0f);
	}
}

vec3 computeDirectionalLight(vec3 color, float intensity, float max_dist, vec3 pos){
	// Distance from current point to light
	vec3 L = pos - v_world_position;
	// Modulus
	float light_dist = length(L);
	// Normalize L
	L/= light_dist;
	vec3 N = normalize(v_normal);
	float NdotL = clamp(dot(L,N), 0.0, 1.0);

	// Attenuation
	float att_factor = max_dist - light_dist;
	att_factor /= max_dist;
	att_factor = max(att_factor, 0.0);
	return color * NdotL * intensity * pow(att_factor,2);
}

vec3 computePointLight(vec3 color, float intensity, float max_dist, vec3 pos){
	// Distance from current point to light
	vec3 L = pos - v_world_position;
	// Modulus			
	float light_dist = length(L);
	// Normalize L
	L/= light_dist;
	vec3 N = normalize(v_normal);
	float NdotL = clamp(dot(L,N), 0.0, 1.0);

	// Attenuation
	float att_factor = max_dist - light_dist;
	att_factor /= max_dist;
	att_factor = max(att_factor, 0.0);
	return color * NdotL * intensity * pow(att_factor,2);
}

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(u_ambient_light);

	// -- Single Pass --
	if (u_type_of_render == 0){
		// Iterate lights
		for (int i = 0; i < MAX_LIGHTS; i++) {
			if (u_lights_type[i] == 1){
				light += computePointLight(u_lights_color[i], u_lights_intensity[i], u_lights_max_distance[i], u_lights_position[i]);
			}
			else if (u_lights_type[i] == 2){
				light += computeSpotLight(u_lights_color[i], u_lights_intensity[i], u_lights_max_distance[i], u_lights_position[i], u_lights_direction[i], u_lights_cone_cos[i], u_lights_cone_exp[i]);
			}
			else if (u_lights_type[i] == 3){
				light += computeDirectionalLight(u_lights_color[i], u_lights_intensity[i], u_lights_max_distance[i], u_lights_position[i]);
			}
		}
	}

	// -- Multi Pass --
	else if (u_type_of_render == 1){
		if (u_light_type == 1){
			light += computePointLight(u_light_color, u_light_intensity, u_light_max_distance, u_light_position);
		}
		else if (u_light_type == 2){
			light += computeSpotLight(u_light_color, u_light_intensity, u_light_max_distance, u_light_position, u_light_direction, u_light_cone_cos, u_light_cone_exp);
		}
		else if (u_light_type == 3){
			light += computeDirectionalLight(u_light_color, u_light_intensity, u_light_max_distance, u_light_position);
		}

	}

	color.xyz *= light;

	FragColor = color;
}

\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}